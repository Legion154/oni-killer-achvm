Green - very well
Yellow - not bad
Orange - under normal
Red - bad

----------------------------------------------------------------------------


import React, { useState, useRef, useEffect } from "react";

const HorizontalDrag = () => {
  const [isDragging, setIsDragging] = useState(false);
  const [offsetX, setOffsetX] = useState(0); // Horizontal position
  const [initialX, setInitialX] = useState(0); // Initial X when drag starts

  const draggableRef = useRef(null); // Ref for the draggable element

  const handleMouseDown = (e) => {
    setIsDragging(true);
    setInitialX(e.clientX - offsetX); // Calculate the initial X when drag starts
  };

  const handleMouseMove = (e) => {
    if (isDragging) {
      const currentX = e.clientX;
      const newOffsetX = currentX - initialX;

      // Optional: Add constraints to the drag (e.g., between 0 and 500px)
      const minX = 0;
      const maxX = 500;
      const clampedOffsetX = Math.min(Math.max(newOffsetX, minX), maxX);

      setOffsetX(clampedOffsetX); // Update the position
    }
  };

  const handleMouseUp = () => {
    setIsDragging(false);
  };

  const handleMouseLeave = () => {
    setIsDragging(false);
  };

  // Add event listeners for mouse events when component mounts
  useEffect(() => {
    const draggableElement = draggableRef.current;

    if (draggableElement) {
      draggableElement.addEventListener("mousedown", handleMouseDown);
      document.addEventListener("mousemove", handleMouseMove);
      document.addEventListener("mouseup", handleMouseUp);
      draggableElement.addEventListener("mouseleave", handleMouseLeave);

      // Cleanup listeners when component unmounts
      return () => {
        draggableElement.removeEventListener("mousedown", handleMouseDown);
        document.removeEventListener("mousemove", handleMouseMove);
        document.removeEventListener("mouseup", handleMouseUp);
        draggableElement.removeEventListener("mouseleave", handleMouseLeave);
      };
    }
  }, [isDragging, initialX, offsetX]); // Re-run if dragging state or position changes

  return (
    <div
      ref={draggableRef}
      style={{
        width: "100px",
        height: "100px",
        backgroundColor: "skyblue",
        cursor: "pointer",
        position: "absolute",
        left: `${offsetX}px`,
        transition: "transform 0.1s ease",
      }}
    >
      Drag me
    </div>
  );
};

export default HorizontalDrag;
